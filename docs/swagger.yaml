definitions:
  data.AuthInput:
    properties:
      email:
        example: ' '
        type: string
      password:
        example: ' '
        type: string
    type: object
  data.EmailInput:
    properties:
      email:
        example: ' '
        type: string
    type: object
  data.Genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  data.Movie:
    properties:
      genres:
        items:
          $ref: '#/definitions/data.Genre'
        type: array
      id:
        type: integer
      runtime:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      version:
        type: integer
      year:
        type: integer
    type: object
  data.MovieInput:
    properties:
      genres:
        items:
          type: string
        type: array
      runtime:
        type: integer
      title:
        type: string
      year:
        type: integer
    type: object
  data.RegisterInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  data.Review:
    properties:
      downvotes:
        type: integer
      edited:
        type: boolean
      id:
        type: integer
      movie_id:
        type: integer
      rating:
        type: integer
      text:
        type: string
      upvotes:
        type: integer
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  data.ReviewInput:
    properties:
      edited:
        type: boolean
      id:
        type: integer
      movie_id:
        type: integer
      rating:
        type: integer
      text:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  data.Token:
    properties:
      expiry:
        type: string
      token:
        type: string
    type: object
  data.TokenInput:
    properties:
      token:
        type: string
    type: object
  data.UpdatePasswordInput:
    properties:
      TokenPlaintext:
        type: string
      password:
        type: string
    type: object
  data.User:
    properties:
      activated:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  main.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  main.envelope:
    additionalProperties: {}
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Backend API for Cinemesis project
  termsOfService: http://swagger.io/terms/
  title: Cinemesis API
paths:
  /v1/genres:
    get:
      consumes:
      - application/json
      description: Returns a list of all genres stored in the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/data.Genre'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all genres
      tags:
      - Genres
  /v1/genres/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the genre with the specified ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a genre
      tags:
      - Genres
    get:
      consumes:
      - application/json
      description: Returns the genre with the specified ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Genre'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a genre by ID
      tags:
      - Genres
    patch:
      consumes:
      - application/json
      description: Updates the genre with the specified ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated genre JSON
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/data.Genre'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Genre'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a genre
      tags:
      - Genres
  /v1/genres/attach/{id}:
    patch:
      consumes:
      - application/json
      description: Attaches the specified genres to the movie with the specified ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Genres to attach
        in: body
        name: genres
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/data.Genre'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Attach genres to a movie
      tags:
      - Genres
  /v1/genres/create:
    post:
      consumes:
      - application/json
      description: Creates a genre and stores it in the database
      parameters:
      - description: Genre JSON
        in: body
        name: genre
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.Genre'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "409":
          description: Genre with this name already exists
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new genre
      tags:
      - Genres
  /v1/genres/movie/{id}:
    get:
      consumes:
      - application/json
      description: Returns a list of genres associated with the movie with the specified
        ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/data.Genre'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get genres for a movie
      tags:
      - Genres
  /v1/genres/movie/{id}/:
    put:
      consumes:
      - application/json
      description: Replaces the movie with the specified ID's genres with the ones
        provided in the request body.
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: The new genres to associate with the movie
        in: body
        name: genres
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/data.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Replace a movie's genres
      tags:
      - Movies
  /v1/healthcheck:
    get:
      description: Returns server status and system information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - Debug
  /v1/movies:
    get:
      consumes:
      - application/json
      description: Returns a filtered list of movies with optional sorting and pagination
      parameters:
      - description: Filter by movie title
        in: query
        name: title
        type: string
      - collectionFormat: csv
        description: Comma-separated list of genre names (e.g. genres=Action,Drama)
        in: query
        items:
          type: string
        name: genres
        type: array
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Page size (default is 20)
        in: query
        name: page_size
        type: integer
      - description: Sort by field (id, title, year, runtime), use '-' for descending
          (e.g. -title)
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'movies: []Movie, metadata: Metadata'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List movies
      tags:
      - Movies
    post:
      consumes:
      - application/json
      description: Creates a movie and stores it in the database
      parameters:
      - description: Movie JSON
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/data.MovieInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new movie
      tags:
      - Movies
  /v1/movies/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the movie with the specified ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - Movies
    get:
      consumes:
      - application/json
      description: Returns the movie with the specified ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Movie'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a movie by ID
      tags:
      - Movies
    put:
      consumes:
      - application/json
      description: Updates the movie with the specified ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated movie data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/data.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a movie
      tags:
      - Movies
  /v1/movies/{id}/reviews:
    get:
      consumes:
      - application/json
      description: Returns a filtered list of reviews with optional sorting and pagination
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Filter by review title
        in: query
        name: title
        type: string
      - description: Filter by review rating (0-5)
        in: query
        name: rating
        type: string
      - description: Filter by minimum upvotes
        in: query
        name: min_upvotes
        type: integer
      - description: Filter by date from in ISO 8601 format (e.g. 2020-01-01)
        in: query
        name: date_from
        type: string
      - description: Filter by date to in ISO 8601 format (e.g. 2020-01-01)
        in: query
        name: date_to
        type: string
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Page size (default is 20)
        in: query
        name: page_size
        type: integer
      - description: Sort by field (id, title, rating, upvotes, downvotes, created_at)
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'reviews: []Review, metadata: Metadata'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List reviews for a specific movie
      tags:
      - Reviews
  /v1/reviews:
    post:
      consumes:
      - application/json
      description: Creates a new review and stores it in the database
      parameters:
      - description: Review JSON
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/data.ReviewInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.ReviewInput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new review
      tags:
      - Reviews
  /v1/reviews/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a single review by id
      parameters:
      - description: The id of the review to retrieve
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Review'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Show a review
      tags:
      - Reviews
  /v1/reviews/{id}/vote:
    post:
      consumes:
      - application/json
      description: Casts a vote for a review
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      - description: Vote type (upvote or downvote)
        in: body
        name: vote
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.envelope'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Vote for a review
      tags:
      - Reviews
  /v1/tokens/activation:
    post:
      consumes:
      - application/json
      description: Sends a new activation token to the user's email
      parameters:
      - description: User Email
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/data.EmailInput'
      produces:
      - application/json
      responses:
        "202":
          description: 'message: email sent'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Resend activation token
      tags:
      - Tokens
  /v1/tokens/authentication:
    post:
      consumes:
      - application/json
      description: Validates credentials and returns an authentication token
      parameters:
      - description: Email and Password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/data.AuthInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/data.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Authenticate user and return token
      tags:
      - Tokens
  /v1/tokens/password-reset:
    post:
      consumes:
      - application/json
      description: Sends a password reset token to the user's email
      parameters:
      - description: User Email
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/data.EmailInput'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Create password reset token
      tags:
      - Tokens
  /v1/users:
    post:
      consumes:
      - application/json
      description: Registers a new user account and sends activation email
      parameters:
      - description: User registration input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/data.RegisterInput'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Register a new user
      tags:
      - Users
  /v1/users/activated:
    put:
      consumes:
      - application/json
      description: Activates a user account using a valid activation token
      parameters:
      - description: Activation token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/data.TokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Activate user account
      tags:
      - Users
  /v1/users/password:
    put:
      consumes:
      - application/json
      description: Changes the password for a user using a reset token
      parameters:
      - description: Token and new password
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/data.UpdatePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Update user password
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: 'Enter your Bearer token in the format: Bearer <token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
